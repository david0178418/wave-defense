### General
- When asked to change a feature, do not retain legacy support unless otherwise specified.
- If any instructions are unclear or require additional context, ask before completing a task.

### TypeScript
- Avoid explicit typing when the type can be inferred.
- Avoid stepping around type errors with the use of "any" or "as" without confirming.
- Ensure `strict` and `noUncheckedIndexedAccess` compiler options are respected. Address any resulting type errors.
- Use path aliases defined in `tsconfig.json` (e.g., `@/*` for `src/*`).
- Follow the `verbatimModuleSyntax` rules (e.g., use `import type` for type-only imports).

### Code Style
- Match the indentation style of the file being edited. For new files or where style is ambiguous, use hard tabs.
- Use single quotes for string literals unless double quotes are necessary (e.g., within JSX or for strings containing single quotes).

### Testing
- Do not edit test files unless explicitly directed.
- If contradictions are found between implementation and test files, ask for clarification.

### Frameworks/Libraries
- Utilize `ecspresso` for Entity-Component-System architecture. Follow existing patterns for creating entities, components, systems, and bundles.
    - **Bundles:**
        - Place bundle definitions in the `src/bundles` directory.
        - Name bundle files using the pattern `feature-name.bundle.ts`.
        - Export a factory function from each bundle file (e.g., `export default function myFeatureBundle(): Bundle<C, E, R> { ... }`).
        - Bundles should primarily group related systems (`.addSystem()`) and event handlers (`.setEventHandlers()`).
        - Import bundles using the `@/bundles/` path alias (e.g., `import myFeatureBundle from '@/bundles/my-feature.bundle';`).
- Use `Pixi.js` for rendering, leveraging its concepts (Stage, Sprites, Textures, etc.).
- Use `React` for UI components if applicable, following standard React practices.
- Use `TailwindCSS` for styling, applying utility classes directly in JSX or HTML.

### Project Structure
- Place core game logic within the `src` directory.
- Organize code by feature or domain (e.g., `bundles`, `entities`, `components`, `systems`). 
- Always attempt to implement new logic in new systems and/or bundles as opposed to overloading existing logic
